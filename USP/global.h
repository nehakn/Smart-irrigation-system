//-----------------------------------------------------
// variables
//-----------------------------------------------------
#ifndef GLOBAL_H
#define GLOBAL_H

//-----------------------------------------------------
//define the wifi ssid and password for connection
//-----------------------------------------------------
#define mySsid "your_ssid"
#define myPassword "your_password"
//-----------------------------------------------------
//-----------------------------------------------------

//-----------------------------------------------------
//create access point for admin mode
//-----------------------------------------------------
char ACCESS_POINT_NAME[15];
//#define ACCESS_POINT_PASSWORD  "12345678" 
#define AdminTimeOut 60
//-----------------------------------------------------
//-----------------------------------------------------  

//-----------------------------------------------------
//time-out of admin mode
//-----------------------------------------------------
ESP8266WebServer server(80);    
boolean firstStart = true;      
int AdminTimeOutCounter = 0;    
strDateTime1 DateTime1;       
WiFiUDP UDPNTPClient;       
unsigned long UnixTimestamp = 0;  
boolean Refresh = false; 
int cNTP_Update = 0;        
Ticker tkSecond;          
boolean AdminEnabled = true;    
byte Minute_Old = 100;    
//-----------------------------------------------------
//-----------------------------------------------------

//-----------------------------------------------------
// saving the user inputs
//-----------------------------------------------------
String Vcrop, Vdate, Vmonth, Vyear, Vsoil;
String Vloginid, Vloginpassword;
String Vcdate, Vcmonth, Vcyear;
int Vcdate_i, Vcmonth_i, Vcyear_i;
float Vlatitude;
//-----------------------------------------------------
//-----------------------------------------------------

//-----------------------------------------------------
// chip id used by IU and SIU to recognize USP
//-----------------------------------------------------
int id;
//-----------------------------------------------------
//-----------------------------------------------------

//-----------------------------------------------------
// rtc for time check and irrigation schedule
//-----------------------------------------------------
RTC_DS3231 rtc;
DateTime delay_time, dateForStopWaterIni, dateReadFunc;
//-----------------------------------------------------
//-----------------------------------------------------

//-----------------------------------------------------
// dht and soil moisture sensor pins and its variables
//-----------------------------------------------------
dht DHT; 
#define DHT11_PIN D4 
#define soilMoisturePin A0
unsigned short counter; 
int mat[64][4], pg, window=8, mode_decision;
char boolString[2][6] = {"false", "true"}; //checking dates for pg
//-----------------------------------------------------
//-----------------------------------------------------

//-----------------------------------------------------
//sd card initialization and filenames for storing
//-----------------------------------------------------
SdFat SD;
const uint8_t SD_CS = D8;
File file, sensorDataFile, datesDataFile, fh;
char FileName[16] = {" "};
//-----------------------------------------------------
//----------------------------------------------------- 

//-----------------------------------------------------
// variables needed for etc and IN computation
//-----------------------------------------------------
int t_max[12] = {29,31,26,41,42,38,32,31,32,33,30,28}; 
int t_min[12] = {13,15,19,24,28,26,24,24,23,20,16,13}; 
int humid[12] = {76,60,60,31,38,91,91,100,96,96,77,67};  
int preci[12] = {16,22,15,8,18,168,290,291,157,73,17,19};
int t_mean[12];
float data[66];
float eto[12], etc_mmperday[12], etc_mmpermonth[12];
int check_irrigation_status_nm, check_irrigation_status_im;
String date_today, current_month;
int current_month_int, no_of_applications, stopWaterForToday=0;
float irrigation_interval_days_final[12], runtime_minperday, runtime_hourperday, no_of_applications_modified; 
String dates_to_irrigate[20][3];
// pot size in inch2, water in mL/inch2
float pot_size = 108; // for plantation in rose garden
float water_1mm = 0.65;
int delay_value;
float delay_month[12]; // delay monthwise based on ETc values
//-----------------------------------------------------
//-----------------------------------------------------

//-----------------------------------------------------
// FTP server connection and variables
//-----------------------------------------------------
#define FTPWRITE
#define FTP_PORT        21 
//#define FTP_SERVER    "10.4.0.6" 
#define FTP_SERVER    "14.139.125.71"
#define FTP_USER        "ftpserver"       
#define FTP_PASS        "nino"        
#define FTP_PUT         1
#define FTP_GET         2
WiFiClient client;
WiFiClient dclient;
char outBuf[128];
char outCount;
boolean debug = false;
boolean upload = true;
//-----------------------------------------------------
//-----------------------------------------------------

//-----------------------------------------------------
// connection to IU
//-----------------------------------------------------
int IUServerPort  = 80;
IPAddress IUServer(192,168,8,101); // for airtel module
//IPAddress IUServer(172,20,10,2); // for iPhone
//IPAddress IUServer(10,4,4,2); // vnit internet
WiFiClient IUClient; 
//-----------------------------------------------------
//-----------------------------------------------------

//-----------------------------------------------------
// connection to mqtt broker on SIU
//-----------------------------------------------------
WiFiClient espClient;
PubSubClient MqttClient(espClient);
int count = 0, value = 0;
char message[100] ;
long lastMsg = 0;
char msg[50];
//const char* broker = "10.4.0.6"; // within VNIT network
const char* broker = "14.139.125.71"; // outside VNIT network
char tempTopic[25], humidTopic[25], smTopic[25], irriTopic[25], modeTopic[25];
//-----------------------------------------------------
//-----------------------------------------------------

//-----------------------------------------------------
// variables to save in esp eeprom
//-----------------------------------------------------
struct strConfig 
{
  String ssid;
  String password;
  String loginid;
  String loginpassword;
  byte  IP[4];
  byte  Netmask[4];
  byte  Gateway[4];
  boolean dhcp;
  String ntpServerName;
  long Update_Time_Via_NTP_Every;
  long timezone;
  boolean daylight;
  String DeviceName;
  String cropName;
  int dateOfPlantation[3];
//  int currentDate[3];
  String soilType;
  float latitude;
} config;
//-----------------------------------------------------
// variable declaration 
//-----------------------------------------------------

//-----------------------------------------------------
// functions
//-----------------------------------------------------

//-----------------------------------------------------
//conversion of time to string for comparison
//-----------------------------------------------------
String dateTimeToString(DateTime &dt)
{
  char buffer[50];
  sprintf(buffer, "%d/%d/%d %02d:%02d:%02d",
      dt.day(), dt.month(), dt.year(),
      dt.hour(), dt.minute(), dt.second());
  return String(buffer);
}
//-----------------------------------------------------

//-----------------------------------------------------
//topic names for publishing on mosquitto broker
//-----------------------------------------------------
void topicNames()
{
  // temperature, humidity and soil moisture topics
  String tTopic_string = String();
  tTopic_string = "/usp/";
  tTopic_string += id;
  tTopic_string += "/temp";
  tTopic_string.toCharArray(tempTopic, sizeof(tempTopic));
  String hTopic_string = String();
  hTopic_string = "/usp/";
  hTopic_string += id;
  hTopic_string += "/humid";
  hTopic_string.toCharArray(humidTopic, sizeof(humidTopic));
  String smTopic_string = String();
  smTopic_string = "/usp/";
  smTopic_string += id;
  smTopic_string += "/mois";
  smTopic_string.toCharArray(smTopic, sizeof(smTopic));
  String irriTopic_string = String();
  irriTopic_string = "/usp/";
  irriTopic_string += id;
  irriTopic_string += "/irri";
  irriTopic_string.toCharArray(irriTopic, sizeof(irriTopic));
  String irriCheckTopic_string = String();
  irriCheckTopic_string = "/usp/";
  irriCheckTopic_string += id;
  irriCheckTopic_string += "/mode";
  irriCheckTopic_string.toCharArray(modeTopic, sizeof(modeTopic));
  Serial.println("\nMQTT topics: ");
  Serial.println(tempTopic);
  Serial.println(humidTopic);
  Serial.println(smTopic);
  Serial.println(irriTopic);
  Serial.println(modeTopic);
}
//-----------------------------------------------------

//-----------------------------------------------------
//void setTime()
//{
//  Vcdate_i = Vcdate.toInt();
//  Vcmonth_i = Vcmonth.toInt();
//  Vcyear_i = Vcyear.toInt();
//  DateTime dateReadFunc (Vcyear_i, Vcmonth_i, Vcdate_i,0,0,0);
//  Serial.print("\nCurrent time set by user: ");
//  Serial.print(dateReadFunc.day());
//  Serial.print("/");
//  Serial.print(dateReadFunc.month());
//  Serial.print("/");
//  Serial.println(dateReadFunc.year());
//}
//-----------------------------------------------------

//-----------------------------------------------------
//configuring for connection to wifi
//-----------------------------------------------------
void ConfigureWifi()
{
  Serial.println("Configuring Wifi");
    Serial.println(config.ssid);
  Serial.println(config.password);
  if (!config.dhcp)
  {
    WiFi.config(IPAddress(config.IP[0],config.IP[1],config.IP[2],config.IP[3] ),  
    IPAddress(config.Gateway[0],config.Gateway[1],config.Gateway[2],config.Gateway[3] ) , 
    IPAddress(config.Netmask[0],config.Netmask[1],config.Netmask[2],config.Netmask[3] ));
  }
    WiFi.begin (config.ssid.c_str(), config.password.c_str());
    while (WiFi.status() != WL_CONNECTED) 
  {
    Serial.println("WiFi not connected");
    delay(500);
  }
}
//-----------------------------------------------------

//-----------------------------------------------------
//writing data to eeprom to avoid data loss on power loss
//-----------------------------------------------------
void WriteConfig()
{
  Serial.println("Writing Config");

  /* data to eeprom */
  EEPROM.write(0, 'C');
  EEPROM.write(1, 'F');
  EEPROM.write(2, 'G');

  WriteStringToEEPROM(160, config.cropName);
  EEPROM.write(192, config.dateOfPlantation[0]);
    EEPROM.write(193, config.dateOfPlantation[1]);
  EEPROMWritelong(194, config.dateOfPlantation[2]);
  WriteStringToEEPROM(198, config.soilType);
  EEPROM.write(230, config.latitude);

//  EEPROM.write(230, config.currentDate[0]);
//  EEPROM.write(231, config.currentDate[1]);
//  EEPROMWritelong(232, config.currentDate[2]);

  Vcrop = config.cropName;
  Vdate = config.dateOfPlantation[0];
  Vmonth = config.dateOfPlantation[1];
  Vyear = config.dateOfPlantation[2];
  Vsoil = config.soilType;
  
  Vlatitude = config.latitude;

//  Vcdate = config.currentDate[0];
//  Vcmonth = config.currentDate[1];
//  Vcyear = config.currentDate[2];
  EEPROM.commit();
}
//-----------------------------------------------------

//-----------------------------------------------------
//reading data from eeprom on configuration
//-----------------------------------------------------
boolean ReadConfig()
{
  Serial.println("Reading Configuration");
  if (EEPROM.read(0) == 'C' && EEPROM.read(1) == 'F'  && EEPROM.read(2) == 'G' )
  {
    Serial.println("Configuration Found!");
    config.cropName = ReadStringFromEEPROM(160);
    config.dateOfPlantation[0] = EEPROM.read(192);
    config.dateOfPlantation[1] = EEPROM.read(193);
    config.dateOfPlantation[2] = EEPROMReadlong(194);
    config.soilType = ReadStringFromEEPROM(198);
    config.latitude = EEPROM.read(230);

//    config.currentDate[0] = EEPROM.read(230);
//    config.currentDate[1] = EEPROM.read(231);
//    config.currentDate[2] = EEPROMReadlong(232);

    Vcrop = config.cropName;
    Vdate = config.dateOfPlantation[0];
    Vmonth = config.dateOfPlantation[1];
    Vyear = config.dateOfPlantation[2];
    Vsoil = config.soilType;

    Vlatitude = config.latitude;

//  Vcdate = config.currentDate[0];
//  Vcmonth = config.currentDate[1];
//  Vcyear = config.currentDate[2];
    return true;
  }
  else
  {
    Serial.println("Configuration NOT FOUND!!!!");
    return false;
  }
}
//-----------------------------------------------------

//-----------------------------------------------------
//getting time using ntp
//-----------------------------------------------------
const int NTP_PACKET_SIZE = 48; 
byte packetBuffer[ NTP_PACKET_SIZE]; 
void NTPRefresh()
{
  if (WiFi.status() == WL_CONNECTED)
  {
    IPAddress timeServerIP; 
    WiFi.hostByName(config.ntpServerName.c_str(), timeServerIP); 
    //sendNTPpacket(timeServerIP); // send an NTP packet to a time server


    Serial.println("sending NTP packet...");
    memset(packetBuffer, 0, NTP_PACKET_SIZE);
    packetBuffer[0] = 0b11100011;   // LI, Version, Mode
    packetBuffer[1] = 0;     // Stratum, or type of clock
    packetBuffer[2] = 6;     // Polling Interval
    packetBuffer[3] = 0xEC;  // Peer Clock Precision
    packetBuffer[12]  = 49;
    packetBuffer[13]  = 0x4E;
    packetBuffer[14]  = 49;
    packetBuffer[15]  = 52;
    UDPNTPClient.beginPacket(timeServerIP, 123); 
    UDPNTPClient.write(packetBuffer, NTP_PACKET_SIZE);
    UDPNTPClient.endPacket();
    
    delay(1000);
 
    int cb = UDPNTPClient.parsePacket();
    if (!cb) {
      Serial.println("NTP no packet yet");
    }
    else 
    {
      Serial.print("NTP packet received, length=");
      Serial.println(cb);
      UDPNTPClient.read(packetBuffer, NTP_PACKET_SIZE); // read the packet into the buffer
      unsigned long highWord = word(packetBuffer[40], packetBuffer[41]);
      unsigned long lowWord = word(packetBuffer[42], packetBuffer[43]);
      unsigned long secsSince1900 = highWord << 16 | lowWord;
      const unsigned long seventyYears = 2208988800UL;
      unsigned long epoch = secsSince1900 - seventyYears;
      UnixTimestamp = epoch;
    }
  }
}
//-----------------------------------------------------

//-----------------------------------------------------
//checking admin time-out
//-----------------------------------------------------
void Second_Tick()
{
  strDateTime1 tempDateTime;
  AdminTimeOutCounter++;
  cNTP_Update++;
  UnixTimestamp++;
  ConvertUnixTimeStamp(UnixTimestamp +  (config.timezone *  360) , &tempDateTime);
  if (config.daylight) // Sommerzeit beachten
    if (summertime(tempDateTime.year,tempDateTime.month,tempDateTime.day,tempDateTime.hour,0))
    {
      ConvertUnixTimeStamp(UnixTimestamp +  (config.timezone *  360) + 3600, &DateTime1);
    }
    else
    {
      DateTime1 = tempDateTime;
    }
  else
  {
      DateTime1 = tempDateTime;
  }
  Refresh = true;
}

#endif
//-----------------------------------------------------

//-----------------------------------------------------
//display sd data on the serial monitor
//-----------------------------------------------------
void displaySDData() 
{
  Serial.println("\n\n");
  Serial.println("*************************************");
  SD.ls(LS_DATE | LS_SIZE | LS_R);
  Serial.println("*************************************");
}
//-----------------------------------------------------

//-----------------------------------------------------
//connecting to wifi network
//-----------------------------------------------------
// void setWifi()
// {
//   Serial.println("\n\nConnecting to wifi");
//   WiFi.config(ip, gateway, subnet);
//   WiFi.begin(mySsid, myPassword);
//   while (WiFi.status() != WL_CONNECTED)
//   {
//   delay(500);
//   Serial.println(".");
//   }
//   Serial.print("Connected to: ");
//   Serial.println(mySsid);
//   Serial.print("IP address: ");
//   Serial.println(WiFi.localIP());
//   Serial.println("");
// }
//-----------------------------------------------------

//-----------------------------------------------------
// mqtt connection
//-----------------------------------------------------
void callback(char* topic, byte* payload, unsigned int length) 
{
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) 
  {
    Serial.print((char)payload[i]);
  }
  Serial.println();

}

void reconnect()
 {
  char id_inchar[15];
  String str = String(id);
  str.toCharArray(id_inchar,15);
  int trial=0; // to restrict #times it tries to connect once
  while (!MqttClient.connected()&&trial<5) 
  {
    Serial.print("Attempting MQTT connection...");
    if (MqttClient.connect(id_inchar))
    {
      Serial.println("connected\n");
    } 
    else 
    {
      Serial.print("failed, rc=");
      Serial.print(MqttClient.state());
      Serial.println(" try again in 5 seconds");
      delay(5000);
    }
    trial++;
  }
}
//-----------------------------------------------------

//-----------------------------------------------------
// file upload to SIU using FTP
//-----------------------------------------------------
void efail()
{
  byte thisByte = 0;
  client.println("QUIT");
  while(!client.available()) 
  delay(1);
  while(client.available())
  {  
    thisByte = client.read();    
    Serial.write(thisByte);
  }
  client.stop();
  Serial.println("Command disconnected");
  file.close();
  Serial.println("SD closed");
}

byte eRcv()
{
  byte respCode;
  byte thisByte;
  while(!client.available()) 
  delay(1);
  respCode = client.peek();
  outCount = 0;
  while(client.available())
  {  
    thisByte = client.read();    
    Serial.write(thisByte);
    if(outCount < 127)
    {
      outBuf[outCount] = thisByte;
      outCount++;      
      outBuf[outCount] = 0;
    }
  }
  if(respCode >= '4')
  {
    efail();
    return 0;  
  }
  return 1;
}

byte doFTPForCompData() 
{
  /* redefining */
//  WiFi.disconnect();
  if(WiFi.status() != WL_CONNECTED)
  {
    Serial.println("\nConnecting to wifi");
    WiFi.begin(config.ssid.c_str(), config.password.c_str());
    while (WiFi.status() != WL_CONNECTED) 
    {
      delay(500);
      Serial.println(".");
    }
    Serial.print("Connected to: ");
    Serial.println(config.ssid);
    Serial.print("IP address: ");
    Serial.println(WiFi.localIP());
    Serial.println("");
  }
  
  #ifdef FTPWRITE
    fh = SD.open(FileName, FILE_READ);
  #endif
  if (!fh) 
  {
    Serial.println(F("SD open fail"));
    return 0;
  }
//  while (!client.connect(FTP_SERVER,FTP_PORT)) 
//  {
//    fh.close();
//    Serial.println(F("Command not connected"));
//    return 0;
//  } 
//  added on jan 30, 2019 to limit
  int ftpTry=0;
  while (!client.connect(FTP_SERVER,FTP_PORT)&&ftpTry<5) 
  {
    fh.close();
    Serial.println(F("Command not connected"));
    delay(2000);
    ftpTry++;
    return 0;
  } 
//  else 
//  {
//    fh.close();
    Serial.println(F("Command connection done"));
//    return 0;
//  }
  if (!eRcv()) 
  return 0;
  char login[32];
  if (debug) 
  Serial.println("Send USER");
  sprintf(login,"USER %s", FTP_USER);
  client.println(login);
  //client.println(F("USER ftpserver"));
  if (!eRcv()) 
  return 0;
  if (debug) 
  Serial.println("Send PASSWORD");
  sprintf(login,"PASS %s", FTP_PASS);
  client.println(login);
  //client.println(F("PASS nino"));
  if (!eRcv()) 
  return 0;
  if (debug) 
  Serial.println("Send SYST");
  client.println(F("SYST"));
  if (!eRcv()) 
  return 0;
  if (debug) 
  Serial.println("Send Type I");
  client.println(F("Type I"));
  if (!eRcv()) 
  return 0;
  if (debug) 
  Serial.println("Send PASV");
  client.println(F("PASV"));
  if (!eRcv()) 
  return 0;
  char *tStr = strtok(outBuf, "(,");
  int array_pasv[6];
  for ( int i = 0; i < 6; i++) 
  {
    tStr = strtok(NULL, "(,");
    array_pasv[i] = atoi(tStr);
    if (tStr == NULL) 
    {
      Serial.println(F("Bad PASV Answer"));
    }
  }
  unsigned int hiPort, loPort;
  hiPort = array_pasv[4] << 8;
  loPort = array_pasv[5] & 255;
  if (debug) 
  Serial.print(F("Data port: "));
  hiPort = hiPort | loPort;
  if (debug) 
  Serial.println(hiPort);
  if (dclient.connect(FTP_SERVER, hiPort)) 
  {
    Serial.println(F("Data connected"));
  }
  else 
  {
    Serial.println(F("Data connection failed"));
    client.stop();
    fh.close();
    return 0;
  } 
  Serial.println("Send STOR filename");
  client.print(F("STOR "));
  client.println(FileName);

  if (!eRcv()) 
  {
    dclient.stop();
    return 0;
  }
  if (upload) 
  {
    if (debug) 
    Serial.println(F("Writing"));
    // for faster upload increase buffer size to 1460
    //#define bufSizeFTP 64
    #define bufSizeFTP 1460
    uint8_t clientBuf[bufSizeFTP];
    //unsigned int clientCount = 0;
    size_t clientCount = 0;
    while (fh.available()) 
    {
      clientBuf[clientCount] = fh.read();
      clientCount++;
      if (clientCount > (bufSizeFTP - 1)) 
      {
        dclient.write((const uint8_t *) &clientBuf[0], bufSizeFTP);
        clientCount = 0;
        delay(1);
      }
    }
    if (clientCount > 0) 
      dclient.write((const uint8_t *) &clientBuf[0], clientCount);

  } 
  dclient.stop();
  Serial.println(F("Data disconnected"));
  if (!eRcv()) 
  return 0;
  client.println(F("QUIT"));
  if (!eRcv()) 
  return 0;
  client.stop();
  Serial.println(F("Command disconnected"));
  fh.close();
  if (debug) 
  Serial.println(F("SPIFS closed"));
  return 1;
}
//-----------------------------------------------------

//-----------------------------------------------------
//sending irrigation schedule to SD card
//-----------------------------------------------------
void SendIrrigationDatesToSD()
{
  Serial.println("\nIn sd card storing the irrigation dates");
//   variable filename as per the id
  String fileName = String();
  fileName = "D";
  fileName += id;
  fileName += ".txt";
  fileName.toCharArray(FileName, sizeof(FileName));
//   sprintf(FileName, "11206562.txt");
  Serial.println(FileName);
  SD.remove(FileName);
  fh = SD.open(FileName, FILE_WRITE);
  if (fh)
  {
    Serial.println("file available");
    for(int i=1;i<no_of_applications_modified+2;i++)
    {
      fh.print(dates_to_irrigate[i][1]);
      fh.print("/");
      fh.print(dates_to_irrigate[i][2]);
      fh.print("/");
      fh.println(dates_to_irrigate[i][3]);
    }
    Serial.println("Data written to file");
  }
  else
  {
    Serial.println("error opening the file");
  }
  fh.close();
  delay(1000);

  while(!doFTPForCompData())
  {
    Serial.println("Trying to connect to server...");
    delay(5000);
  }
  Serial.println("Connected to FTP server and data sent");
  delay(1000);
}
//-----------------------------------------------------

//#endif                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            
